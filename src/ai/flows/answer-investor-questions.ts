// This is an autogenerated file from Firebase Studio.
'use server';
/**
 * @fileOverview A flow that answers investor questions about the project using website content.
 *
 * - answerInvestorQuestions - A function that handles answering investor questions.
 * - AnswerInvestorQuestionsInput - The input type for the answerInvestorQuestions function.
 * - AnswerInvestorQuestionsOutput - The return type for the answerInvestorQuestions function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const AnswerInvestorQuestionsInputSchema = z.object({
  question: z.string().describe('The investor\u2019s question about the project.'),
  websiteContent: z.string().describe('The content of the website to use as context.'),
});
export type AnswerInvestorQuestionsInput = z.infer<typeof AnswerInvestorQuestionsInputSchema>;

const AnswerInvestorQuestionsOutputSchema = z.object({
  answer: z.string().describe('The answer to the investor\u2019s question.'),
});
export type AnswerInvestorQuestionsOutput = z.infer<typeof AnswerInvestorQuestionsOutputSchema>;

export async function answerInvestorQuestions(input: AnswerInvestorQuestionsInput): Promise<AnswerInvestorQuestionsOutput> {
  return answerInvestorQuestionsFlow(input);
}

const prompt = ai.definePrompt({
  name: 'answerInvestorQuestionsPrompt',
  input: {schema: AnswerInvestorQuestionsInputSchema},
  output: {schema: AnswerInvestorQuestionsOutputSchema},
  prompt: `You are an AI assistant answering questions from potential investors about a university hospital project in Peshawar.
  Use the following website content as context to answer the question.
  If the answer is not in the website content, respond that you cannot answer the question using the provided information.

  Website Content: {{{websiteContent}}}

  Question: {{{question}}}

  Answer: `,
});

const answerInvestorQuestionsFlow = ai.defineFlow(
  {
    name: 'answerInvestorQuestionsFlow',
    inputSchema: AnswerInvestorQuestionsInputSchema,
    outputSchema: AnswerInvestorQuestionsOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return {answer: output!.answer};
  }
);
